# Accepts outputs from the parent stack
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy the Client VPN'

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "dev"

  ServerCertificateArn:
    Type: String
    Description: ARN of the ACM server certificate used for the VPN endpoint
    
  ClientCidrBlock:
    Type: String
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Description: CIDR range assigned to clients connecting to the client VPN
    Default: 192.168.0.0/16

  VPCId:
    Type: String
    Description: VPC ID of the Client VPN VPC
  
  VpcCIDR:
    Type: String
    Description: CIDR range of the Client VPN VPC
  
  PrivateSubnet1Id:
    Type: String
    Description: Subnet ID of private subnet 1
    
  PrivateSubnet2Id:
    Type: String
    Description: Subnet ID of private subnet 2

Conditions:
  VPCExists: !Not [ !Equals [!Ref VPCId, '']]
  VPCCIDRExists: !Not [ !Equals [!Ref VpcCIDR, '']]
  PrivateSubnet1Exists: !Not [ !Equals [!Ref PrivateSubnet1Id, '']]
  SecondPrivateSubnet: !Not [!Equals [!Ref PrivateSubnet2Id, '']]

Resources:

# Security Group for the Client VPN Endpoint
  VPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for VPN endpoint"
      Tags: 
        - Key: Name
          Value: 'client-vpn-endpoint'
        - Key: Environment
          Value: !Ref EnvironmentName
      VpcId: !If [VPCExists, !Ref VPCId, !ImportValue 'ParentVPCId']

# Logs for the Client VPN Endpoint   
  ClientVPNEndpointLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub 'client-vpn-endpoint-${EnvironmentName}'
      RetentionInDays: 7
      Tags: 
        - Key: Environment
          Value: !Ref EnvironmentName

# Client VPN Endpoint with split tunnel
  ClientVpnEndpoint:
    Type: AWS::EC2::ClientVpnEndpoint
    Properties: 
      AuthenticationOptions:
      - Type: "certificate-authentication"
        MutualAuthentication: 
          ClientRootCertificateChainArn: !Ref ServerCertificateArn
      ClientCidrBlock: !Ref ClientCidrBlock
      ConnectionLogOptions: 
        Enabled: true
        CloudwatchLogGroup: !Ref ClientVPNEndpointLogsGroup

      Description: "Client VPN Endpoint"
      SecurityGroupIds:
        - !GetAtt VPNSecurityGroup.GroupId
      ServerCertificateArn: !Ref ServerCertificateArn
      SplitTunnel: true
      VpcId: !If [VPCExists, !Ref VPCId, !ImportValue 'ParentVPCId']
      TransportProtocol: "udp"
      
  VPCSubnetAssociation1:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Properties:
      ClientVpnEndpointId: 
        Ref: ClientVpnEndpoint
      SubnetId: !If [PrivateSubnet1Exists, !Ref PrivateSubnet1Id, !ImportValue 'PrivateSubnetId1']

  VPCSubnetAssociation2:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Condition: SecondPrivateSubnet
    Properties:
      ClientVpnEndpointId: 
        Ref: ClientVpnEndpoint
      SubnetId: !Ref PrivateSubnet2Id
  
  AuthoriseDevVPCRule:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties: 
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      Description: "Authorize VPN VPC"
      TargetNetworkCidr: !If [VPCCIDRExists, !Ref VpcCIDR, !ImportValue 'VpcCIDR']
